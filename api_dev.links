module JSFFI {
  alien javascript "/js/vid_calling.js" {
    playLocalVideo : (String) ~> ();
    setName : () ~> ();
    getLocalName : () ~> (String);
    toString : (String) ~> (String);
    getID: () ~> (String);
    setID: () ~> ();

    createOffer: () ~> (String);
    receiveOffer: (String) ~> (String);
  }
}

fun displayLocalVid() {
  var vidXML = <video id = "local_vid" autoplay = "true" style="object-fit:cover; width:320px; height:240px"></video>;
  appendChildren(vidXML, getNodeById("vids"));
  JSFFI.playLocalVideo("local_vid")
}

fun getSelfInfo() {
  var name = JSFFI.getLocalName();
  var id = JSFFI.getID();

  (clientName = name, clientID = id)
}

##WebRTC Functions

fun attemptCall(msg){

}


### CLIENT

##Message Types:
##VidMessage(senderInfo = (clientName=name, clientID=id), destInfo = (clientName=name, clientID=id), msgType = type, data = data)

fun handleVidMessage(serverPid, msg) {

  var localID = JSFFI.getID();
  var localName = JSFFI.getLocalName();

  var destInfo = msg.destInfo;
  var destID = JSFFI.toString(destInfo.clientID);
  var destName = JSFFI.toString(destInfo.clientName);

  var foreignInfo = msg.senderInfo;
  var foreignID = JSFFI.toString(foreignInfo.clientID);
  var foreignName = JSFFI.toString(foreignInfo.clientName);

  var type = JSFFI.toString(msg.msgType);

  if(foreignID == localID) {
    print("Vid is from me I guess");
    print(foreignID);
    print(localID)
  }
  else if(localID <> destID) {
    print("Vid not for me");
    print(localID);
    print(destID)
  }
  else {

    switch(type) {
      case "initial" ->
        print("initial VidMessage received");
        var offerStr = JSFFI.createOffer();
        serverPid ! Broadcast(VidMessage(senderInfo = (clientID=localID, clientName=localName), destInfo = (clientID=foreignID, clientName=foreignName), msgType = "offer", data = offerStr));
        ()

      case "offer" ->
        print("offer VidMessage received");
        var offerStr = JSFFI.toString(msg.data);
        var acceptStr = JSFFI.receiveOffer(offerStr);
        serverPid ! Broadcast(VidMessage(senderInfo = (clientID=localID, clientName=localName), destInfo = (clientID=foreignID, clientName=foreignName), msgType = "accept", data = acceptStr));
        ()

        case "accept" ->
        print("something");
        ()
    }
  }
}

## Loop thread run on the client, listens for NewClient messages from the server
## and prints a message to the console whenever one is received
fun clientLoop(serverPid) {
    receive {
        case NewClient(msg) ->
            print("New client registered.");

            var localInfo = getSelfInfo();

            var localID = JSFFI.getID();

            var foreignID = JSFFI.toString(msg.clientID);


            if(localID <> foreignID) {
              serverPid ! Broadcast(VidMessage(senderInfo = localInfo, destInfo = msg, msgType = "initial", data = ""));
              print("New User!");
              print(localID);
              print(foreignID);
              clientLoop(serverPid)
            }
            else {
              print("My own register");
              print(localID);
              print(foreignID);
              clientLoop(serverPid)
            }


        case VidMessage(msg) ->
          print("VidMessage Received from ");
          print(JSFFI.toString(msg.senderInfo.clientID));
          handleVidMessage(serverPid, msg);
          clientLoop(serverPid)
    }

}

## Run on the client whenever the page has loaded.
## Registers itself with the server, then proceeds to loop, awaiting messages
## from the server
fun clientRegister(serverPid) {

    JSFFI.setName();
    JSFFI.setID();

    var name = JSFFI.getLocalName();
    var id = JSFFI.getID();
    displayLocalVid();

    var clientInfo = (clientID = id, clientName = name);

    serverPid ! Register(self(), clientInfo);

    clientLoop(serverPid)
}

## Run on the server to generate a page for the client. Spawns a process on the
## client and generates the HTML.

fun mainPage(serverPid) {

  var clientPid = spawnClient { clientRegister(serverPid) };

  page
  <html>
    <body>
    <div id = "vids"></div>
    <div id = "users"></div>
    </body>
  </html>

}

### SERVER
## Sends a message to a list of clients
fun broadcast(clients, msg) server {
    switch (clients) {
        case [] -> ()
        case (c,_)::clients ->
            c ! msg;
            broadcast(clients, msg)
    }
}

# Loops, keeping track of the client PIDs
fun serverLoop(clients) server {
    receive {
        case Register(pid, clientInfo) ->
            var newClients = (pid, clientInfo) :: clients;
            # Broadcast a "New Client" message
            broadcast(newClients, NewClient(clientInfo));
            serverLoop(newClients)

        case Send(targets, msg) ->
          broadcast(targets, msg);
          serverLoop(clients)

        case Broadcast(msg) ->
          broadcast(clients, msg);
          serverLoop(clients)

    }
}


# Main method, run once when the server is started
fun main() {
    # Spawns a process on the server which keeps track of all clients
    var serverPid = spawn { serverLoop([]) };
    # Registers the "mainPage" route
    addRoute("/", fun(_) { mainPage(serverPid) });
    addStaticRoute("/js", "js", [("js", "text/javascript")]);
    # Starts the server and distribution
    serveWebsockets();
    servePages()
}


main()
