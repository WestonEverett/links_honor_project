module JSFFI {
  alien javascript "/js/vid_calling.js" {
    playLocalVideo : (String) ~> ();
    setName : () ~> ();
    askForYesNo : (String) ~> (String); #Possible bug, JSFFI issue returning Bool (doesn't recognize)
    getLocalName : () ~> (String);
    toString : (String) ~> (String);
    getID: () ~> (String);
    setID: () ~> ();

    createOffer: (String) ~> ();
    createAnswer: (String, String) ~> ();
    createAccept: (String, String) ~> ();
    checkAsyncDone: (String) ~> (String);
    hangup: (String) ~> ();
    hangupAll: () ~> ();

    setMute: (String, Bool) ~> ();
    setDeaf: (String, Bool) ~> ();
    setBlind: (String, Bool) ~> ();
    setHide: (String, Bool) ~> ();

    showInputs: () ~> ();
    setInputs: () ~> ();

    checkDeviceSet: () ~> (String);

    checkForIceCandidates: (String) ~> (String);
    newRemoteCandidate: (String, String) ~> ();
  }
}

typename ClientDescription = (clientID:String, clientName:String, room:String);
typename AudVidMods = (mute:Bool, deaf:Bool, hid:Bool, blind:Bool);
typename UserClientRecord = (clientDesc:ClientDescription, audVidMods:AudVidMods);

fun displayLocalVid() {
  var vidXML = <video id = "local_vid" autoplay = "true" style="object-fit:cover; width:320px; height:240px"></video>;
  appendChildren(vidXML, getNodeById("vids"));

  JSFFI.playLocalVideo("local_vid")
}

##WebRTC Functions
sig waitForAsync : (String) ~> (String)
fun waitForAsync(foreignID){

  var response = JSFFI.checkAsyncDone(foreignID);

  if (response <> "wait") {
    response
    }
    else {
      waitForAsync(foreignID)
    }
}


fun checkCandidates(serverPid, foreignID) {
  var candidate = JSFFI.checkForIceCandidates(foreignID);

  if (candidate <> "None") {

    var localID = JSFFI.getID();

    serverPid ! Send(foreignID, VidMessage(senderID = localID, destID = foreignID, msgType = "ice", data = candidate));

    checkCandidates(serverPid, foreignID)
  }
  else {
    checkCandidates(serverPid, foreignID)
  }
}

### CLIENT

##Message Types:
##VidMessage(senderID = id, destID = id, msgType = type, data = data)

fun handleVidMessage(serverPid, msg) {

  var localID = JSFFI.getID();

  var destID = msg.destID;

  var foreignID = msg.senderID;

  var type = msg.msgType;

  #print("I am " ^^ localID ^^ " this is for " ^^ destID ^^ " from " ^^ foreignID);

  if(localID <> destID) {
    print("I don't think this is for me")
  }
  else {

    #print("I think this is for me");

    switch(type) {
      case "initial" ->
        #print("This is an initial VidMessage");
        JSFFI.createOffer(foreignID);
        var offerStr = waitForAsync(foreignID);
        #print(offerStr);
        serverPid ! Send(foreignID, VidMessage(senderID = localID, destID = foreignID, msgType = "offer", data = offerStr));

        var iceClient = spawnClient { checkCandidates(serverPid, foreignID) };

        #print("I am " ^^ localID ^^ " sending an offer to " ^^ foreignID);
        ()

      case "offer" ->
        #print("This is an offer VidMessage");

        var offerStr = JSFFI.toString(msg.data);
        JSFFI.createAnswer(foreignID,offerStr);

        var answerStr = waitForAsync(foreignID);

        serverPid ! Send(foreignID, VidMessage(senderID = localID, destID = foreignID, msgType = "accept", data = answerStr));

        var iceClient = spawnClient { checkCandidates(serverPid, foreignID) };

        #print("I am " ^^ localID ^^ " sending an accept to " ^^ foreignID);
        ()

      case "accept" ->
        #print("This is an accept VidMessage");
        var answerStr = JSFFI.toString(msg.data);
        JSFFI.createAccept(foreignID,answerStr);

        var _ = waitForAsync(foreignID);

        #print("I am " ^^ localID ^^ " accepting an offer from " ^^ foreignID);
        ()

      case "ice" ->
        #print("This is an ICE VidMessage");
        var candidate = JSFFI.toString(msg.data);
        JSFFI.newRemoteCandidate(foreignID,candidate);
        ()
    }
  }
}

##changedInfo = clientInfo record
#sig moveToRoom : (UserClientRecord) ~> ()
fun moveToRoom(changedInfoAll){

  var changedInfo = changedInfoAll.clientDesc;
  var audVid = changedInfoAll.audVidMods;

  var clientID = changedInfo.clientID;
  var clientName = changedInfo.clientName;
  var roomName = changedInfo.room;

  print("placing " ^^ clientName ^^ " with id " ^^ clientID ^^ " in room " ^^ roomName);
  var divID = "DivOf" ^^ clientID;
  var checkID = "CheckOf" ^^ clientID;

  var node = getNodeById(divID);

  var clientPid = self();

  if(not(isNull(node))){
    if(roomName <> "Exit"){
      var tempXML = <div id="tempNodeID"></div>;
      appendChildren(tempXML, getNodeById(roomName));

      var tempNode = getNodeById("tempNodeID");

      swapNodes(node, tempNode);

      removeNode(tempNode)
    }
    else {
      removeNode(node)
    }
  } else if (clientID <> JSFFI.getID()){
    var nameXML =
      <div id = "{divID}">
        <input type="checkbox" id="{checkID}" name="{checkID}" value="{clientID}"></input>
        <label for="{checkID}">{stringToXml(clientName)}</label>
        <button type="submit" id="{"mute"^^clientID}" l:onclick="{clientPid ! ChangeAudVid("mute", clientID)}">{stringToXml(if(audVid.mute) "Unmute" else "Mute")}</button>
        <button type="submit" id="{"deaf"^^clientID}" l:onclick="{clientPid ! ChangeAudVid("deaf", clientID)}">{stringToXml(if(audVid.deaf) "Undeafen" else "Deafen")}</button>
        <button type="submit" id="{"hid"^^clientID}" l:onclick="{clientPid ! ChangeAudVid("hide", clientID)}">{stringToXml(if(audVid.hid) "Show" else "Hide")}</button>
        <button type="submit" id="{"blind"^^clientID}" l:onclick="{clientPid ! ChangeAudVid("blind", clientID)}">{stringToXml(if(audVid.blind) "Unblind" else "Blind")}</button>

      </div>;

    appendChildren(nameXML, getNodeById(roomName))
  } else {
    var nameXML =
      <div id = "{divID}">
        <input type="checkbox" id="{checkID}" name="{checkID}" value="{clientID}" checked="true"></input>
        <label for="{checkID}">{stringToXml(clientName)}</label>
      </div>;

      appendChildren(nameXML, getNodeById(roomName))
  };
  ()
}


##StateUpdate((clientInfo(clientID, clientName, room)))
#sig handleStateUpdate : (Process, [UserClientRecord], UserClientRecord, ClientDescription) ~> [UserClientRecord]
fun handleStateUpdate(serverPid, oldOthersInfo, myInfo, changedInfo) {

  var myRoom = myInfo.clientDesc.room;

  for (cInfo <- oldOthersInfo) {
    var c = cInfo.clientDesc;
    if (c.clientID == changedInfo.clientID) {

      var fullChangedInfo = (cInfo with clientDesc = changedInfo);

      if(and([c.room == myRoom, myRoom <> "0"])){
        JSFFI.hangup(c.clientID);
        print("Hanging up with " ^^ c.clientID)
      }
      else {
      ()
      };

      if(and([changedInfo.room == myRoom, myRoom <> "0"])) {
        serverPid ! Send(changedInfo.clientID, VidMessage(senderID = myInfo.clientDesc.clientID, destID = changedInfo.clientID, msgType = "initial", data = ""));
        print("Sending Init VidMessage to " ^^ changedInfo.clientID)
      } else {};

      moveToRoom(fullChangedInfo);

      if(changedInfo.room <> "Exit") {
        [fullChangedInfo]
      } else {
        []
      }

    }
    else {
      [cInfo]
    }
  }
}

##InitialState([clientInfo(clientID, clientName, room)])
##sig handleInitialState : ([(UserClientRecord)]) ~> ()
fun handleInitialState(clientArr, myInfo) {

  var _ = for (c <- clientArr) {
    moveToRoom(c);
    []
  };
  moveToRoom(myInfo);
  ()
}

sig getAllCheckedIDs : () ~> ([String])
fun getAllCheckedIDs(){

  var roomTopNode = getNodeById("rooms");

  var allRoomNodes = domGetChildrenFromRef(roomTopNode);

  var allNodes = for(roomTopNode <- allRoomNodes) domGetChildrenFromRef(roomTopNode);

  for (cNode <- allNodes) {
    var tagName = domGetTagNameFromRef(cNode);

    if(domGetTagNameFromRef(cNode) == "DIV") {
      var inputBox = nextSibling(firstChild(cNode));

      if(domGetPropertyFromRef(inputBox, "checked") == "true"){
        [domGetAttributeFromRef(inputBox, "value")]
      } else {
        []
      }
    } else {
      []
    }
  }
}

#sig changeToRoom : (UserClientRecord, String, (Process ({hear:a::Any|b}), a::Any)) ~> (UserClientRecord)
fun changeToRoom(myInfo, toRoom, serverPid) {
  if(myInfo.clientDesc.room <> toRoom) {
    JSFFI.hangupAll();

    var id = myInfo.clientDesc.clientID;
    serverPid ! ChangeRoom(id, toRoom);
    var myNewInfo = (myInfo with clientDesc = (myInfo.clientDesc with room = toRoom));
    moveToRoom(myNewInfo);

    myNewInfo
    } else {myInfo}
}

fun handleMigrate(serverPid, myInfo, event) {

  var curNode = getTarget(event);
  var curDiv = parentNode(curNode);
  var toRoom = domGetAttributeFromRef(curDiv, "id");

  var idList = getAllCheckedIDs();

  var info = for (id <- idList) {

    if(id == myInfo.clientDesc.clientID) {

      [changeToRoom(myInfo, toRoom, serverPid)]
    } else {
      var newInfo = (myInfo.clientDesc with room = toRoom);
      serverPid ! Send(id, RequestRoomChange(newInfo));
      []
    }
  };

  if (length(info) > 0) {
    hd(info)
  } else {
    myInfo
  }


}

#sig dispRoomRequest : (ClientDescription) -> ()
fun dispRoomRequest(msg){
  var clientPid = self();
  var msgText = msg.clientName ^^ " wants you to move to room " ^^ msg.room;
  var msgTable = getNodeById("msgTable");
  var msgXML =
    <tr><td>
      {stringToXml(msgText)}
      <button type="submit" l:onclick="{clientPid ! ChangeRoomByName(msg.room); removeNode(getTarget(event))}">Accept</button>
    </td></tr>;

  appendChildren(msgXML, msgTable);
  if(length(domGetChildrenFromRef(msgTable)) > 5) removeNode(firstChild(msgTable)) else ()
}

sig updateAudVid : (UserClientRecord) ~> ()
fun updateAudVid(info){
  print("updating " ^^info.clientDesc.clientName);
  var buttonTxt = if(info.audVidMods.mute) "Unmute" else "Mute";
  domSetPropertyFromRef(getNodeById("mute"^^info.clientDesc.clientID), "innerHTML", buttonTxt);
  JSFFI.setMute(info.clientDesc.clientID, info.audVidMods.mute);

  var buttonTxt = if(info.audVidMods.deaf) "Undeafen" else "Deafen";
  domSetPropertyFromRef(getNodeById("deaf"^^info.clientDesc.clientID), "innerHTML", buttonTxt);
  JSFFI.setDeaf(info.clientDesc.clientID, info.audVidMods.deaf);

  var buttonTxt = if(info.audVidMods.hid) "Show" else "Hide";
  domSetPropertyFromRef(getNodeById("hid"^^info.clientDesc.clientID), "innerHTML", buttonTxt);
  JSFFI.setHide(info.clientDesc.clientID, info.audVidMods.hid);

  var buttonTxt = if(info.audVidMods.blind) "Unblind" else "Blind";
  domSetPropertyFromRef(getNodeById("blind"^^info.clientDesc.clientID), "innerHTML", buttonTxt);
  JSFFI.setBlind(info.clientDesc.clientID, info.audVidMods.blind);
  ()
}

sig handleAudVidChange : (String, UserClientRecord) ~> (UserClientRecord)
fun handleAudVidChange(effect, info){

  var newInfo = switch(effect){

    case "mute" ->
      (info with audVidMods = (info.audVidMods with mute=not(info.audVidMods.mute)))

    case "deaf" ->
      (info with audVidMods = (info.audVidMods with deaf=not(info.audVidMods.deaf)))

    case "hide" ->
      (info with audVidMods = (info.audVidMods with hid=not(info.audVidMods.hid)))

    case "blind" ->
      (info with audVidMods = (info.audVidMods with blind=not(info.audVidMods.blind)))
  };

  updateAudVid(newInfo);
  newInfo

}

fun handleGlobalAudVid(demand, othersInfo){

  var othersNewInfo = switch(demand){

    case "muteAll" ->
      for (info <- othersInfo) [(info with audVidMods = (info.audVidMods with mute=true))]

    case "unmuteAll" ->
      for (info <- othersInfo) [(info with audVidMods = (info.audVidMods with mute=false))]

    case "deafenAll" ->
      for (info <- othersInfo) [(info with audVidMods = (info.audVidMods with deaf=true))]

    case "undeafenAll" ->
      for (info <- othersInfo) [(info with audVidMods = (info.audVidMods with deaf=false))]

    case "hideAll" ->
      for (info <- othersInfo) [(info with audVidMods = (info.audVidMods with hid=true))]

    case "showAll" ->
      for (info <- othersInfo) [(info with audVidMods = (info.audVidMods with hid=false))]

    case "blindAll" ->
      for (info <- othersInfo) [(info with audVidMods = (info.audVidMods with blind=true))]

    case "unblindAll" ->
      for (info <- othersInfo) [(info with audVidMods = (info.audVidMods with blind=false))]

  };

  var _ = for (info <- othersNewInfo){
    updateAudVid(info);
    []
  };

  othersNewInfo
}

fun replaceIntro(serverPid, clientPid){



  replaceDocument(

  <html>

    <button type="submit" l:onclick="{clientPid ! Exit()}">Exit</button>
    <button type="submit" l:onclick="{clientPid ! GlobalAudVidUpdate("muteAll")}">Mute All</button>
    <button type="submit" l:onclick="{clientPid ! GlobalAudVidUpdate("unmuteAll")}">Unmute All</button>
    <button type="submit" l:onclick="{clientPid ! GlobalAudVidUpdate("deafenAll")}">Deafen All</button>
    <button type="submit" l:onclick="{clientPid ! GlobalAudVidUpdate("undeafenAll")}">Undeafen All</button>
    <button type="submit" l:onclick="{clientPid ! GlobalAudVidUpdate("hideAll")}">Hide All</button>
    <button type="submit" l:onclick="{clientPid ! GlobalAudVidUpdate("showAll")}">Show All</button>
    <button type="submit" l:onclick="{clientPid ! GlobalAudVidUpdate("blindAll")}">Blind All</button>
    <button type="submit" l:onclick="{clientPid ! GlobalAudVidUpdate("unblindAll")}">Unblind All</button>

    <div id = "rooms">
      <div id = "0">
        <form l:onsubmit="{clientPid ! Migrate(event)}">
          <button type="submit">Quiet Room</button>
        </form>
      </div>
      <div id = "1">
        <form l:onsubmit="{clientPid ! Migrate(event)}">
          <button type="submit">Room 1</button>
        </form>
      </div>
      <div id = "2">
        <form l:onsubmit="{clientPid ! Migrate(event)}">
          <button type="submit">Room 2</button>
        </form>
      </div>
    </div>

    <div id = "msgs">
      <table id = "msgTable">
      </table>
    </div>

    <div id = "vids"></div>

  </html>

  )
}

## Run on the client whenever the page has loaded.
## Registers itself with the server, then proceeds to loop, awaiting messages
## from the server
fun clientRegister(serverPid, clientPid) {

    JSFFI.setInputs();

    replaceIntro(serverPid, clientPid);

    JSFFI.setName();
    JSFFI.setID();

    var name = JSFFI.getLocalName();
    var id = JSFFI.getID();
    displayLocalVid();

    var defaultAudVids = (mute=false, deaf=false, hid=false, blind=false);
    var myClientDesc = (clientID = id, clientName = name, room = "0");

    #sig clientInfo : (UserClientRecord)
    var clientInfo = (clientDesc = myClientDesc, audVidMods = defaultAudVids);

    serverPid ! Register(self(), myClientDesc);

    clientInfo
}


## Loop thread run on the client, listens for NewClient messages from the server
## and prints a message to the console whenever one is received
##(clientDesc = (clientID,clientName,room), audVidMods = (mute=bool, deaf=bool, hid=bool, blind=bool))

fun clientLoop(serverPid, othersInfo, myInfo) {
    receive {

        case RegisterClient(serverPid2, clientPid) ->
          print("register self");
          var myNewInfo = clientRegister(serverPid, clientPid);
          clientLoop(serverPid, [], myNewInfo)


        case NewClient(msg) ->
          print("New client registered " ^^ msg.clientID);
          var newAudVidMod = (mute = false, deaf = false, hid = false, blind = false);
          var newUser = (clientDesc = msg, audVidMods = newAudVidMod);
          var othersNewInfo =  if(newUser.clientDesc.clientID <> myInfo.clientDesc.clientID) newUser :: othersInfo else othersInfo;
          clientLoop(serverPid, othersNewInfo, myInfo)


        case VidMessage(msg) ->
          print("VidMessage Received from " ^^ JSFFI.toString(msg.senderID));
          handleVidMessage(serverPid, msg);
          clientLoop(serverPid, othersInfo, myInfo)

        case StateUpdate(msg) ->
          print("StateUpdate Received");
          var othersNewInfo = handleStateUpdate(serverPid, othersInfo, myInfo, msg);
          clientLoop(serverPid, othersNewInfo, myInfo)

        case InitialState(msg) ->
          print("InitialState received");
          var defaultAudVids = (mute = false, deaf = false, hid = false, blind = false);
          var othersNewInfo = for (inf <- msg) [(clientDesc = inf, audVidMods = defaultAudVids)];
          handleInitialState(othersNewInfo, myInfo);
          clientLoop(serverPid, othersNewInfo, myInfo)

        case RequestRoomChange(msg) ->
          print("Request Received from " ^^ msg.clientID ^^ " for room " ^^ msg.room);
          dispRoomRequest(msg);
          clientLoop(serverPid, othersInfo, myInfo)

        case Migrate(event) ->
          print("Migrate Received");
          var myNewInfo = handleMigrate(serverPid, myInfo, event);
          clientLoop(serverPid, othersInfo, myNewInfo)

        case ChangeAudVid(effect, clientID) ->
          print(effect ^^ " " ^^ clientID);
          var othersNewInfo = for(info <- othersInfo) if(info.clientDesc.clientID <> clientID) [info] else [handleAudVidChange(effect, info)];
          var myNewInfo = if(myInfo.clientDesc.clientID <> clientID) myInfo else handleAudVidChange(effect, myInfo);
          clientLoop(serverPid, othersNewInfo, myNewInfo)

        case ChangeRoomByName(roomName) ->
          print("moving to room " ^^ roomName);
          var myNewInfo = changeToRoom(myInfo, roomName, serverPid);
          clientLoop(serverPid, othersInfo, myNewInfo)

        case GlobalAudVidUpdate(demand) ->
          print(demand);
          var othersNewInfo = handleGlobalAudVid(demand, othersInfo);
          clientLoop(serverPid, othersNewInfo, myInfo)

        case Exit() ->
          print("Exiting");
          var myNewInfo = (myInfo with clientDesc = (myInfo.clientDesc with room = "Exit"));
          serverPid ! UserExit(myNewInfo.clientDesc);
          removeNode(getDocumentNode())
    }
}


fun clientInit(serverPid){

  var defaultAudVids = (mute=false, deaf=false, hid=false, blind=false);
  var myClientDesc = (clientID = "0", clientName = "null", room = "0");
  var clientInfo = (clientDesc = myClientDesc, audVidMods = defaultAudVids);

  JSFFI.showInputs();

  clientLoop(serverPid, [], clientInfo)
}

fun waitForDeviceSet(){
  if(JSFFI.checkDeviceSet() == "set"){
    ()
  } else {
    waitForDeviceSet()
  }
}



## Run on the server to generate a page for the client. Spawns a process on the
## client and generates the HTML.

fun mainPage(serverPid) {

  var clientPid = spawnClient { clientInit(serverPid) };

  page
  <html>
    <div class="select">
      <label for="audioSource">
        Audio input:
      </label><select id="audioSource"></select>
    </div>
    <div class="select">
      <label for="videoSource">
      Video input:
      </label><select id="videoSource"></select>
    </div>

    <form l:onsubmit="{clientPid ! RegisterClient(serverPid, clientPid)}">
      <button type="submit">Accept</button>
    </form>
  </html>

}

### SERVER
## Sends a message to a list of clients
fun broadcast(clients, msg) server {
    switch (clients) {
        case [] -> ()
        case (clientPid,_)::clients ->
            clientPid ! msg;
            broadcast(clients, msg)
    }
}

# Loops, keeping track of the client PIDs
fun serverLoop(clients) server {
    receive {
        case Register(pid, clientInfo) ->
            var newClients = (pid, clientInfo) :: clients;

            # Broadcast a "NewClient" message
            broadcast(clients, NewClient(clientInfo));

            var infoToSend = for ((_ , clientInfo) <- clients){
              [clientInfo]
            };

            broadcast([(pid, clientInfo)], InitialState(infoToSend));

            broadcast(clients, StateUpdate(clientInfo));

            serverLoop(newClients)

        case Send(targetID, msg) ->

          var target = for ((pid , clientInfo) <- clients)
            if (clientInfo.clientID == targetID) {
              [(pid , clientInfo)]
            } else {
              []
            };

            broadcast(target, msg);
            serverLoop(clients)

        case Broadcast(msg) ->
          broadcast(clients, msg);
          serverLoop(clients)

        case UserExit(leavingClientInfo) ->
          var newClients = for ((pid , clientInfo) <- clients)
            if (leavingClientInfo.clientID == clientInfo.clientID) [] else [(pid, clientInfo)];

          broadcast(newClients, StateUpdate(leavingClientInfo));
          serverLoop(newClients)

        case ChangeRoom(userID, newRoom) ->

          var newClients = for ((pid , clientInfo) <- clients)
            if (clientInfo.clientID == userID) {
              var id = clientInfo.clientID;
              var name = clientInfo.clientName;
              var newClientInfo = (clientID = id, clientName = name, room = newRoom);

              [(pid, newClientInfo)]
            }

            else
              [(pid, clientInfo)];

          var clientsToUpdate = for ((pid , clientInfo) <- newClients)
            if (clientInfo.clientID <> userID) {
              [(pid , clientInfo)]
            }
            else
              [];

          var clientInfoToSend = for ((pid , clientInfo) <- newClients)
            if (clientInfo.clientID == userID) {
              [clientInfo]
            }
            else
              [];

          var infoToSend = hd(clientInfoToSend);

          broadcast(clientsToUpdate, StateUpdate(infoToSend));

          serverLoop(newClients)

    }
}


# Main method, run once when the server is started
fun main() {
    # Spawns a process on the server which keeps track of all clients
    var serverPid = spawn { serverLoop([]) };
    # Registers the "mainPage" route
    addRoute("/", fun(_) { mainPage(serverPid) });
    addStaticRoute("/js", "js", [("js", "text/javascript")]);
    # Starts the server and distribution
    serveWebsockets();
    servePages()
}


main()
