# currently works under the condition that users don't
# move within the range of others, move out, then move
# back in within 3 seconds
open import MvuHTML;
open import MvuAttrs;
open import MvuEvents;
open import MvuSubscriptions;
import Mvu;
import MvuCommands;
import VidAPI;

typename ID = String;

module JSApp {
  alien javascript "js/app.js" {
    takePicture : (ID) ~> ();
    getPictureURL : () ~> String;
    getName : (ID) ~> String;
  }
}

#broacasts message to all clients on server
fun broadcast(clients, msg) server {
    switch (clients) {
        case [] -> ()
        case x::xs ->
            x ! msg;
            print("broadcasting... \n");
            broadcast(xs, msg)
    }
}

#waits for message, sends message to call clients on server
fun serverLoop(clients) server {
    receive {
        case Register(pid) ->
          var newClients = pid :: clients;
          print("registered user \n");
          serverLoop(newClients)

        case BroadcastMessage(msg) ->
          broadcast(clients, Message(msg));
          print("broadcasting message to " ^^ intToString(length(clients)) ^^ " clients \n");
          serverLoop(clients)
    }
}

var serverPid = spawn { serverLoop([]) };

typename DeviceID = String;

typename Position = (x : Float, y : Float);

typename Vector = (x : Float, y : Float);

#different ways the character can move
typename CharacterState = [| Up | Down | Left | Right |];

typename PositionInfo = (id: ID, x : Float, y : Float);
typename IconInfo = (id: ID, name : String, imageURL : String, callIDs : [String], x : Float, y : Float);

typename ServerMessage =
  [| CharacterPosition : PositionInfo
   | CharacterIcon : IconInfo
  |];

#messages that the updt function receives
typename Msg =
  [| NewFrame
   | MoveChar : CharacterState
   | StopChar : CharacterState
   | NoOp
   | ServerMsg : ServerMessage
  |];

typename RequestMsg =
  [| Message : ServerMessage |];

#datetype for character
typename CharacterData =
  (id: ID,
   name: String,
   callIDs: [String],
   x : Float,
   y: Float,
   imageURL : String
  );

typename DirectionRecord =
  (up : Bool,
   down : Bool,
   left : Bool,
   right : Bool
  );

#this is the model for MVU
typename Room =
  (charData : CharacterData,
   directions : DirectionRecord,
   others : [CharacterData],
   pid : Process({hear : RequestMsg})
  );

#parameters
var halfWidth = 650.0;
var halfHeight = 200.0;
var charVelocity = 5.0;

var xLim = 1200.0;
var yLim = 400.0;

#default room to start with
fun defaultRoom(clientPid, myID) {
  print("going through default room");
  var localID = myID;
  var localName = JSApp.getName(localID);
  #JSApp.takePicture(myID);
  var pictureURL = JSApp.getPictureURL();
  var charIcon = CharacterIcon(id = localID, name = localName, imageURL = pictureURL, callIDs = [], x = halfWidth, y = halfHeight);
  serverPid ! BroadcastMessage(charIcon);
  (charData =
    (id = localID,
     name = localName,
     callIDs = [],
     x = halfWidth,
     y = halfHeight,
     imageURL = pictureURL
    ),
   directions =
    (up = false,
     down = false,
     left = false,
     right = false
    ),
   others = [],
   pid = clientPid
  )
}

#runs every frame
fun animFrameHandler() {
  animationFrame(fun(_) { NewFrame })
}

var upKey = "ArrowUp";
var downKey = "ArrowDown";
var leftKey = "ArrowLeft";
var rightKey = "ArrowRight";
var spaceKey = " ";

#handler to detect keydown event
fun keyDownHandler() {
  open MvuSubscriptions;

  onKeyDown(fun(evt) {
    var keycode = evt.key;
    if (keycode == upKey) {
      MoveChar(Up)
    } else if (keycode == downKey) {
      MoveChar(Down)
    } else if (keycode == leftKey) {
      MoveChar(Left)
    } else if (keycode == rightKey) {
      MoveChar(Right)
    } else {
      NoOp
    }
  })
}

#handler to detect keyup event
fun keyUpHandler() {
  open MvuSubscriptions;

  onKeyUp(fun(evt) {
    var keycode = evt.key;
    if (keycode == upKey) {
      StopChar(Up)
    } else if (keycode == downKey) {
      StopChar(Down)
    } else if (keycode == leftKey) {
      StopChar(Left)
    } else if (keycode == rightKey) {
      StopChar(Right)
    } else {
      NoOp
    }
  })
}

sig euclideanDistance : (Position, Position) ~> Float
fun euclideanDistance(pos1, pos2) {
  sqrt((pos1.x -. pos2.x)^.2.0 +. (pos1.y -. pos2.y)^.2.0)
}

fun isCharInList(c, lst) {
  switch(lst) {
    case [] -> false
    case x::xs ->
      if (x.id == c.id)
        true
      else
        isCharInList(c, xs)
  }
}

fun printNames(chars) {
  switch(chars) {
    case [] -> ()
    case x::xs ->
      print(x.name);
      printNames(xs)
  }
}

fun printNamesHandler(chars) {
  onClick(fun() {
    if (length(chars) > 0) {
      print("Other users:");
      printNames(chars);
      NoOp
    } else {
      print("No other users");
      NoOp
    }
  })
}

sig setCharacterDirection : (DirectionRecord, CharacterState) ~> DirectionRecord
fun setCharacterDirection(directions, direction) {
  if (direction == Up) {
    (directions with up = true)
  } else if (direction == Down) {
    (directions with down = true)
  } else if (direction == Left) {
    (directions with left = true)
  } else {
    (directions with right = true)
  }
}

sig unsetCharacterDirection : (DirectionRecord, CharacterState) ~> DirectionRecord
fun unsetCharacterDirection(directions, direction) {
  if (direction == Up) {
    (directions with up = false)
  } else if (direction == Down) {
    (directions with down = false)
  } else if (direction == Left) {
    (directions with left = false)
  } else {
    (directions with right = false)
  }
}

#moves character in certain direction
sig moveChar : (CharacterData, DirectionRecord) ~> CharacterData
fun moveChar(charData, directions) {
  var yDis0 = 0.0;
  var yDis1 = if (directions.up == true) {
    yDis0 -. charVelocity
  } else {
    yDis0
  };
  var yDis2 = if (directions.down == true) {
    yDis1 +. charVelocity
  } else {
    yDis1
  };
  var xDis0 = 0.0;
  var xDis1 = if (directions.left == true) {
    xDis0 -. charVelocity
  } else {
    xDis0
  };
  var xDis2 = if (directions.right == true) {
    xDis1 +. charVelocity
  } else {
    xDis1
  };
  var newX = charData.x +. xDis2;
  var newY = charData.y +. yDis2;
  if (newX >= 0.0 && newX <= xLim && newY >= 0.0 && newY <= yLim)
    (charData with x = newX, y = newY)
  else
    charData
}

sig characterMoved : (CharacterData, CharacterData) ~> Bool
fun characterMoved(oldCharData, newCharData) {
  oldCharData.x <> newCharData.x || oldCharData.y <> newCharData.y
}

#replaces charData in list of charDatas
fun replaceChar(char, peerChars) {
  switch(peerChars) {
    case [] -> []
    case x::xs ->
      if (x.id == char.id)
        char :: replaceChar(char, xs)
      else
        x :: replaceChar(char, xs)
  }
}

fun charWithIdExists(id, chars) {
  switch(chars) {
    case [] -> false
    case x::xs ->
      if (x.id == id)
        true
      else
        charWithIdExists(id, xs)
  }
}

fun getCharWithId(id, chars) {
  switch(chars) {
    case x::xs ->
      if (x.id == id)
        x
      else
        getCharWithId(id, xs)
  }
}

fun isCloseToPeer(localChar, peerChar) {
  var distance = euclideanDistance((x = localChar.x, y = localChar.y), (x = peerChar.x, y = peerChar.y));
  if (distance <= 75.0)
    true
  else
    false
}

fun confirmConnection(localChar, peerChar) {
  if (VidAPI.checkIfConnected(localChar.id, peerChar.id)) {
    ()
  } else {
    confirmConnection(localChar, peerChar)
  }
}

fun connectToPeer(localChar, peerChar) {
  if(VidAPI.checkIfConnected(localChar.id, peerChar.id)){
    print("Already connected to " ^^ peerChar.id)
  } else {
    print("Calling connectToUser to " ^^ peerChar.id);
    VidAPI.callClient(localChar.id, peerChar.id);
    confirmConnection(localChar, peerChar)
  }
}

fun connectToPeers(charData, peerChars) {
  switch(peerChars) {
    case [] -> ()
    case x::xs ->
      var _ = spawnClient{ connectToPeer(charData, x) };
      connectToPeers(charData, xs)
  }
}

fun disconnectFromPeer(localChar, peerChar) {
  VidAPI.hangup(localChar.id, peerChar.id)
}

fun disconnectFromPeers(localChar, peerChars) {
  switch(peerChars) {
    case [] -> ()
    case x::xs ->
    if (VidAPI.checkIfConnected(localChar.id, x.id)){
      disconnectFromPeer(localChar, x);
      disconnectFromPeers(localChar, xs)
    } else {
      disconnectFromPeers(localChar, xs)
    }
  }
}

fun getClosePeers(localChar, others) {
  switch(others) {
    case [] -> []
    case x::xs ->
      var isClose = isCloseToPeer(localChar, x);
      if (isClose)
        x :: getClosePeers(localChar, xs)
      else
        getClosePeers(localChar, xs)
  }
}

fun getFarPeers(others, closePeers) {
  switch(others) {
    case [] -> []
    case x::xs ->
      var isFarPeer = not(isCharInList(x, closePeers));
      if (isFarPeer)
        x :: getFarPeers(xs, closePeers)
      else
        getFarPeers(xs, closePeers)
  }
}

fun isIn(toLookFor, b){
  switch (b) {
    case [] -> false
    case bCur::b ->
      if(bCur == toLookFor) {
        true
      } else {
        isIn(toLookFor, b)
      }
  }
}

fun getNew(origChars, newChars){
  for(curChar <- newChars){
    if(not(isIn(curChar.id, origChars))){
      [curChar]
    } else {
      []
    }
  }
}

fun manageConnections(charData, peerChars) {
  var closePeers = getClosePeers(charData, peerChars);
  var farPeers = getFarPeers(peerChars, closePeers);
  connectToPeers(charData, getNew(charData.callIDs, closePeers));
  disconnectFromPeers(charData, farPeers);
  closePeers
}

#once the user receives an new/updated charData, it updates
#the room based on it
sig processServerMsg : (ServerMessage, Room) ~> Room
fun processServerMsg(serverMsg, room) {
  switch(serverMsg){
    case CharacterPosition(info) ->
      print("Recieved Character Position");
      if (info.id <> room.charData.id && charWithIdExists(info.id, room.others)) {
        var currentChar = getCharWithId(info.id, room.others);
        var newChar = (currentChar with x = info.x, y = info.y);
        var newPeerList = replaceChar(newChar, room.others);
        (room with others = newPeerList)
      } else {
        room
      }
    case CharacterIcon(info) ->
      print("Recieved Character Icon");
      if (info.id <> room.charData.id && not(charWithIdExists(info.id, room.others))) {
        print("and it's new?");
        var charData = (id = info.id, name = info.name, x = info.x, y = info.y, callIDs = info.callIDs, imageURL = info.imageURL);
        var appendToOthers = charData :: room.others;
        var cData = room.charData;
        var charIcon = CharacterIcon(id = cData.id, name = cData.name, imageURL = cData.imageURL, callIDs = cData.callIDs, x = room.charData.x, y = room.charData.y);
        serverPid ! BroadcastMessage(charIcon);
        (room with others = appendToOthers)
      } else {
        room
      }
  }
}

#main update function in MVU cycle, runs when message (Msg) is received
sig updt : (Msg, Room) ~> (Room, MvuCommands.Command(Msg))
fun updt(msg, room) {
  switch(msg) {
    #every frame, this is the case, updates room based on room
    case NewFrame ->
      var newChar = moveChar(room.charData, room.directions);
      var charMoved = characterMoved(room.charData, newChar);
      if (charMoved) {
        var charPos = CharacterPosition(id = newChar.id, x = newChar.x, y = newChar.y);
        serverPid ! BroadcastMessage(charPos);
        var newCallers = manageConnections(room.charData, room.others);
        var newCallIDs = for(caller <- newCallers){
          [caller.id]
        };
        ((room with charData = (newChar with callIDs = newCallIDs)), MvuCommands.empty)
      } else {
        (room, MvuCommands.empty)
      }
    case MoveChar(dir) ->
      var newDirections = setCharacterDirection(room.directions, dir);
      ((room with directions = newDirections), MvuCommands.empty)
    case StopChar(dir) ->
      var newDirections = unsetCharacterDirection(room.directions, dir);
      ((room with directions = newDirections), MvuCommands.empty)
    #runs when the client finds a message (charData) in the client loop process
    case ServerMsg(msg) ->
      var room = processServerMsg(msg, room);
      (room, MvuCommands.empty)
    case NoOp -> (room, MvuCommands.empty)
  }
}

### Rendering
var ae = MvuAttrs.empty;
var he = MvuHTML.empty;
fun ch(xs) { MvuHTML.concat(xs) }
fun ca(xs) { MvuAttrs.concat(xs) }

#HTML for charData
sig drawChar : (CharacterData) -> HTML(Msg)
fun drawChar(c) {
  var x = c.x;
  var y = c.y;
  var name = c.name;
  div (class ("character") +@
    style ("left:" ^^ floatToString(x) ^^ "px;top:" ^^ floatToString(y) ^^ "px;position:absolute;" ^^
    "background-image: url(" ^^ c.imageURL ^^ ");background-position: center;"),
    p (class("charName"), textNode(name))
  )
}

#list of charDatas in HTML
sig listOfHTMLChars : ([CharacterData]) ~> [HTML(Msg)]
fun listOfHTMLChars(cs) {
  switch(cs) {
    case []         -> []
    case charData::xs ->
      drawChar(charData) :: listOfHTMLChars(xs)
  }
}

fun joinedView(room) {
  var elem = getNodeById("localVideoDiv");
  domSetAttributeFromRef(elem, "class", "webcamMode");
  var name = room.charData.name;
  ch([
    h1 (class("localName"), textNode(name)),
    div (id ("canvas"), ch([
      drawChar(room.charData),
      ch(listOfHTMLChars(room.others)),
      input (
        ca([
          id ("printNames"),
          type ("submit"),
          value ("Print Users"),
          printNamesHandler(room.others)
        ]),
        he)
    ]))
  ])
}

#main view function in MVU cycle, display different HTML bases on state of model
sig view : (Room) ~> HTML(Msg)
fun view(room) {
  joinedView(room)
}

#subscriptions to detect events for updt function
sig subscriptions : (Room) -> Sub(Msg)
fun subscriptions(model) {
  animFrameHandler() +^ keyUpHandler() +^ keyDownHandler()
}

#invariant, at least one of msgs, pids is empty.
fun clientLoop(hndl) {
    receive {
      case Message(msg) ->
        Mvu.dispatch(ServerMsg(msg), hndl);
        clientLoop(hndl)
    }
}

#begins webRTC connection and registers client with server
fun clientRegister() {

  var myID = VidAPI.startClient("streamScroll");
  var (auds, vids) = VidAPI.getSources();
  VidAPI.setSources(myID, hd(auds), hd(vids));
  VidAPI.setWriteLoc(myID, myID, "localVideoDiv");
  VidAPI.playLocalVid(myID);
  sleep(500);
  var hndl = Mvu.runHandle("placeholder", defaultRoom(self(), myID), view, updt, subscriptions, MvuCommands.empty);
  serverPid ! Register(self());
  clientLoop(hndl)
}

fun mainPage(serverPid) {
  var clientPid = spawnClient { clientRegister() };
  page
  <html>
    <head>
      <title>Room</title>
      <link rel="stylesheet" href="css/app.css" type="text/css" />
    </head>
    <body>
      <div id="placeholder"></div>
      <div id="streamScroll"><div id="localVideoDiv"></div></div>
    </body>
  </html>
}

fun main() {
  addRoute("/", fun(_) { mainPage(serverPid) });
  addStaticRoute("/css", "css", [("css", "text/css")]);
  addStaticRoute("/js", "js", [("js", "text/javascript")]);
  serveWebsockets();
  servePages()
}

main()
