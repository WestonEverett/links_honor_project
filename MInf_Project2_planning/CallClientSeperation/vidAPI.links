##Server

module JSFFI {
  alien javascript "/js/sep_vidcalls.js" {
    playLocalVideo : (String) ~> ();

    createOffer: (String, String) ~> ();
    createAnswer: (String, String, String) ~> ();
    createAccept: (String, String, String) ~> ();
    checkAsyncDone: (String, String) ~> (String);
    hangup: (String, String) ~> ();
    hangupAll: (String) ~> ();

    basicInputs: () ~> ();

    checkDeviceSet: () ~> (String);

    checkForIceCandidates: (String, String) ~> (String);
    newRemoteCandidate: (String, String, String) ~> ();
  }
}

fun broadcast(clients, msg) server {
    switch (clients) {
        case [] -> ()
        case (clientPid,_)::clients ->
            clientPid ! msg;
            broadcast(clients, msg)
    }
}

fun serverLoop(clients, curID) server {

  receive {

    case Register(callerPid, clientPid) ->
      var strID = intToString(curID);
      callerPid ! ID(strID);
      clientPid ! RegisterClient(strID);
      var newClients = clients ++ [(clientPid, strID)];

      serverLoop(newClients, curID + 1)

    case Send(targetID, msg) ->
      var target = for ((pid , clientID) <- clients)
        if (clientID == targetID) {
          [(pid , clientID)]
        } else {
          []
        };

      broadcast(target, msg);
      serverLoop(clients, curID)
    }
}

var serverPid = spawn { serverLoop([], 0) };

##WebRTC Functions
sig waitForAsync : (String, String) ~> (String)
fun waitForAsync(myID, foreignID){

  var response = JSFFI.checkAsyncDone(myID, foreignID);

  if (response <> "wait") {
    response
    }
    else {
      waitForAsync(myID, foreignID)
    }
}


fun checkCandidates(foreignID, localID) {
  var candidate = JSFFI.checkForIceCandidates(localID, foreignID);

  if (candidate <> "None") {

    serverPid ! Send(foreignID, VidMessage(senderID = localID, destID = foreignID, msgType = "ice", data = candidate));

    checkCandidates(foreignID, localID)
  }
  else {
    checkCandidates(foreignID, localID)
  }
}

##Message Types:
##VidMessage(senderID = id, destID = id, msgType = type, data = data)

fun handleVidMessage(msg) {
  var myID = msg.destID;

  var foreignID = msg.senderID;

  var type = msg.msgType;


  switch(type) {
    case "initial" ->
      print("INITIAL");
      JSFFI.createOffer(myID, foreignID);
      var offerStr = waitForAsync(myID, foreignID);
      #print(offerStr);
      serverPid ! Send(foreignID, VidMessage(senderID = myID, destID = foreignID, msgType = "offer", data = offerStr));

      var iceClient = spawnClient { checkCandidates(foreignID, myID) };
      ()

    case "offer" ->
      print("OFFER");
      var offerStr = msg.data;
      JSFFI.createAnswer(myID, foreignID,offerStr);

      var answerStr = waitForAsync(myID, foreignID);

      serverPid ! Send(foreignID, VidMessage(senderID = myID, destID = foreignID, msgType = "accept", data = answerStr));

      var iceClient = spawnClient { checkCandidates(foreignID, myID) };
      ()

    case "accept" ->
      print("ACCEPT");
      var answerStr = msg.data;
      JSFFI.createAccept(myID, foreignID,answerStr);

      var _ = waitForAsync(myID, foreignID);
      ()

    case "ice" ->
      print("ICE");
      var candidate = msg.data;
      JSFFI.newRemoteCandidate(myID, foreignID,candidate);
      ()
  }
}

##CallClient
fun callClientLoop() {
  receive {

    case RegisterClient(myID) ->
      print("CallClient received ID: " ^^ myID);
      callClientLoop()

    ##From Server
    case VidMessage(msg) ->
      print("VidMessage Received from " ^^ msg.senderID);
      handleVidMessage(msg);
      callClientLoop()

    case Hangup(myID, foreignID) ->
      print("Hanging up with " ^^ foreignID ^^ " on Client " ^^ myID);
      JSFFI.hangup(myID, foreignID);
      callClientLoop()

    case HangupAll(myID) ->
      print("Hanging up all connections on " ^^ myID);
      JSFFI.hangupAll(myID);
      callClientLoop()
  }
}

fun startClient() {

  var clientPid = spawnClient {callClientLoop()};

  spawnWait {serverPid ! Register(self(), clientPid); receive {case ID(id) -> id}}
}

fun callClient(myID, foreignID) {
  serverPid ! Send(foreignID, VidMessage(senderID = myID, destID = foreignID, msgType = "initial", data = ""))
}

fun hangup(myID, foreignID) {
  serverPid ! Send(myID, Hangup(myID, foreignID))
}

fun hangupAll(myID) {
  serverPid ! Send(myID, HangupAll(myID))
}

fun setInputs() {
  JSFFI.basicInputs();
  ()
}

fun waitForDeviceSet() {
  if (JSFFI.checkDeviceSet() == "set") {
    ()
  } else {
    waitForDeviceSet()
  }
}

fun playLocalVid() {
  waitForDeviceSet();
  JSFFI.playLocalVideo("Local");
  ()
}
